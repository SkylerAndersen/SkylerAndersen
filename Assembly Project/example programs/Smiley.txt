// allocate memory for the image, color black
// and color white, plus x and y
ALOC 19045 // allocate memory for image
ALOC 1 // allocate memory for y
ALOC 1 // allocate memory for x
ALOC 1 // allocate memory for color white
ALOC 1 // allocate memory for color black

// save address of global variables
SET R0 0
ADD R0 ST R9

// allocate memory and save address of locals
ALOC 5 // allocate memory for box1-box5
ALOC 1 // allocate memory for the index
ADD R0 ST R8

// set y to zero, and x and i to -1
SET R1 -1
SAV R1 2(R9)
SAV R0 3(R9)
SAV R1 0(R8)

// add a null at the end of the image
SET R1 19048
ADD R1 R1 R1
ADD R1 R1 R1
ADD R1 R9 R1 // R1 -> address of image
SAV R0 0(R1)

// create black and white colors
// white
SET R0 255
SET R1 255
SET R2 255
SET R3 255
PACK R0 R1 8
MFPK R0
PACK R2 R3 8
MFPK R1
PACK R0 R1 16
SAV PK 1(R9)
// black
SET R0 255
SET R1 0
PACK R0 R1 8
MFPK R0
PACK R0 R1 16
SAV PK 0(R9)

// main loop
MAIN_LOOP:
CPT 0
JNC INCREMENT
CPT 0
JNC EVAL_BOOLS
CPT 0
JNC DRAW
// check if i is at the end of the image
LOD R0 0(R8) // i
EQI R0 19043 // CN -> if we are at the end
EQI CN 0 // CN -> if we are not at the end yet
JWC MAIN_LOOP
// draw the image to the screen
INC R9 16
DISP R9
JNC END

// draw a black or white pixel
DRAW:
// get pixel color (1:white,0:black)
LOD R0 1(R8)
EQI R0 0
// load black and white and i and image
LOD R0 0(R9) // black
LOD R1 1(R9) // white
LOD R3 0(R8) // i
ADD R3 R3 R4
ADD R4 R4 R4
INC R4 16
ADD R9 R4 R2 // pixel reference
// set the pixel color
SET R3 0
ADD R3 R1 R3 // R3 is pixel color
// if I need a pixel, set the color to black
JWC IS_BACKGROUND
SET R3 0
ADD R3 R0 R3
IS_BACKGROUND:
SAV R3 0(R2) // add pixel
RTN

// evaluate the booleans for each box
EVAL_BOOLS:
LOD R0 2(R9) // x
LOD R1 3(R9) // y
// box1
GTI R0 37
SWAP R2 CN
GTI R1 23
AND CN R2
SWAP CN R2
LTI R0 54
AND CN R2
SWAP CN R2
LTI R1 72
AND R2 CN
JWC MIN_ONE_TRUE
// box2
GTI R0 85
SWAP R2 CN
GTI R1 23
AND CN R2
SWAP CN R2
LTI R0 102
AND CN R2
SWAP CN R2
LTI R1 72
AND R2 CN
JWC MIN_ONE_TRUE
// box3
GTI R0 13
SWAP R2 CN
GTI R1 79
AND CN R2
SWAP CN R2
LTI R0 30
AND CN R2
SWAP CN R2
LTI R1 96
AND R2 CN
JWC MIN_ONE_TRUE
// box4
GTI R0 109
SWAP R2 CN
GTI R1 79
AND CN R2
SWAP CN R2
LTI R0 126
AND CN R2
SWAP CN R2
LTI R1 96
AND R2 CN
JWC MIN_ONE_TRUE
// box5
GTI R0 29
SWAP R2 CN
GTI R1 95
AND CN R2
SWAP CN R2
LTI R0 110
AND CN R2
SWAP CN R2
LTI R1 112
AND R2 CN
JWC MIN_ONE_TRUE
// if none is true
SET R0 0
SAV R0 1(R8)
RTN
// if one is true
MIN_ONE_TRUE:
SET R0 1
SAV R0 1(R8)
RTN

PRINT:
// get stack pos
SET R1 0
ADD R1 ST R1
LOD R0 0(R8) // i
SET R2 0
CAST R0
ALOC 2
SET R3 32
SAV R3 0(ST)
SET R3 0
SAV R3 1(ST)
CCAT R0 ST R0
LOD R2 2(R9) // x
SET R3 0
CAST R2
ALOC 2
SET R4 32
SAV R4 0(ST)
SET R4 0
SAV R4 1(ST)
CCAT R2 ST R2
CCAT R0 R2 R0
LOD R2 3(R9) // y
SET R3 0
CAST R2
ALOC 2
SET R4 10
SAV R4 0(ST)
SET R4 0
SAV R4 1(ST)
CCAT R2 ST R2
CCAT R0 R2 R0
// print
PRNT R0
// reset stack pos
SET R2 0
ADD R2 R1 ST
RTN

// increment subroutine
INCREMENT:
LOD R0 0(R8) // R0 is i
INC R0 1 // increment i
LOD R1 2(R9) // R1 is x
INC R1 1 // increment x
LOD R2 3(R9) // R2 is y
EQI R1 138
EQI CN 0 // CN == (x != 138)
// if (x == 138) {x=0; y++;}
JWC END_INC
SET R1 0
INC R2 1
// now R0=i, R1=x, R2=y. Now saving
END_INC:
SAV R1 2(R9)
SAV R2 3(R9)
SAV R0 0(R8)
RTN

END: